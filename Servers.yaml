AWSTemplateFormatVersion: '2010-09-09'
Description: Auto Scaling Group with EC2 instances in private subnets, fetching index from S3

Parameters:
  LaunchTemplateName:
    Type: String
    Description: Name of the EC2 Launch Template
    Default: TweetServers

  NetworkStackName:
    Type: String
    Description: Name of the network stack
    Default: NetworkStack

  KeyPairName:
    Description: Key pair name for SSH access
    Type: AWS::EC2::KeyPair::KeyName

  SecurityGroupsStackName:
    Type: String
    Description: Name of the security groups stack
    Default: SecurityGroupsStack

  ALBListenerPort:
    Type: Number
    Description: Port for the ALB listener
    Default: 80

  HTMLBucketName:
    Type: String
    Description: S3 Bucket name for hosting nginx default pages
    Default: tweet-app-html-bucket

Resources:

  # S3 Bucket for Default Nginx Pages
  HTMLBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref HTMLBucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  # S3 Bucket Policy to make objects publicly readable
  HTMLBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref HTMLBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub '${HTMLBucket.Arn}/*'

  # IAM Role for EC2 Instances
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: S3HTMLAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: 
                  - !Sub '${HTMLBucket.Arn}/*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Path: /

  # IAM Instance Profile
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2InstanceRole

  # Initiating EC2 linux instances
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Ref LaunchTemplateName
      LaunchTemplateData:
        InstanceType: t3.micro
        ImageId: ami-05edb7c94b324f73c  # Amazon Linux 2023
        KeyName: !Ref KeyPairName
        SecurityGroupIds:
          - !ImportValue InstanceSecurityGroupId
        IamInstanceProfile:
          Name: !Ref EC2InstanceProfile
        UserData:
          Fn::Base64: 
            !Sub |
              #!/bin/bash
              # Update system
              yum update -y

              # Install dependencies
              amazon-linux-extras enable nginx1
              yum install -y nginx awscli

              # Fetch default nginx pages from S3
              aws s3 cp s3://${HTMLBucketName}/ /usr/share/nginx/html/ --recursive

              # Start and enable nginx
              systemctl start nginx
              systemctl enable nginx

  # Creating scaling group containing the 2 EC2 instances
  TweetAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: TweetAutoScalingGroup
      MinSize: 2
      MaxSize: 2
      DesiredCapacity: 2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !ImportValue PrivateSubnet1Id
        - !ImportValue PrivateSubnet2Id
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      Tags:
        - Key: Name
          Value: TweetAutoScalingInstance
          PropagateAtLaunch: true

  # Application Load Balancer (ALB)
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: TweetALB
      Scheme: internet-facing
      Subnets:
        - !ImportValue PublicSubnet1Id
        - !ImportValue PublicSubnet2Id
      SecurityGroups:
        - !ImportValue ALBSecurityGroupId
      Tags:
        - Key: Name
          Value: TweetALB

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: !Ref ALBListenerPort
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: TweetTargetGroup
      VpcId: !ImportValue VPCId
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTP
      HealthCheckPort: traffic-port
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3

Outputs:
  ALBDNSName:
    Description: The DNS name of the load balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
