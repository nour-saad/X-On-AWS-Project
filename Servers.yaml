AWSTemplateFormatVersion: '2010-09-09'
Description: Auto Scaling Group with EC2 instances in private subnets, fetching index from S3

Parameters:
  LaunchTemplateName:
    Type: String
    Description: Name of the EC2 Launch Template
    Default: TweetServers

  NetworkStackName:
    Type: String
    Description: Name of the network stack
    Default: NetworkStack

  KeyPairName:
    Description: Key pair name for SSH access
    Type: AWS::EC2::KeyPair::KeyName

  SecurityGroupsStackName:
    Type: String
    Description: Name of the security groups stack
    Default: SecurityGroupsStack

  ALBListenerPort:
    Type: Number
    Description: Port for the ALB listener
    Default: 80

  HTMLBucketName:
    Type: String
    Description: S3 Bucket name for hosting nginx pages
    Default: tweet-app-html-bucket

Resources:
  HTMLBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref HTMLBucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: S3HTMLAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: "*"
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Path: /

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2InstanceRole

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: EC2InstanceRole
    Properties:
      Bucket: !Ref HTMLBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !GetAtt EC2InstanceRole.Arn
            Action: "*"
            Resource: 
              - !Sub "arn:aws:s3:::${HTMLBucket}"
              - !Sub "arn:aws:s3:::${HTMLBucket}/*"

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: EC2InstanceProfile
    Properties:
      LaunchTemplateName: !Ref LaunchTemplateName
      LaunchTemplateData:
        InstanceType: t3.micro
        ImageId: ami-05edb7c94b324f73c  # Amazon Linux 2023
        KeyName: !Ref KeyPairName
        SecurityGroupIds:
          - !ImportValue InstanceSecurityGroupId
        IamInstanceProfile:
          Name: !Ref EC2InstanceProfile
        UserData:
          Fn::Base64: 
            !Sub |
              #!/bin/bash -xe
              yum update -y
              yum install -y nginx aws-cli

              aws s3 ls
              aws s3 cp s3://${HTMLBucketName} /usr/share/nginx/html/ || exit 1
              systemctl start nginx
              systemctl enable nginx

              cat << 'EOF' > /usr/local/bin/update-content.sh
              #!/bin/bash
              aws s3 cp s3://${HTMLBucketName} /usr/share/nginx/html/
              EOF
              chmod +x /usr/local/bin/update-content.sh
              (crontab -l ; echo "@reboot /usr/local/bin/update-content.sh") | crontab -

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: TweetALB
      Scheme: internet-facing
      Subnets:
        - !ImportValue PublicSubnet1Id
        - !ImportValue PublicSubnet2Id
      SecurityGroups:
        - !ImportValue ALBSecurityGroupId
      Tags:
        - Key: Name
          Value: TweetALB

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: TweetTargetGroup
      VpcId: !ImportValue VPCId
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTP
      HealthCheckPort: traffic-port
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: !Ref ALBListenerPort
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  TweetAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: ApplicationLoadBalancer
    Properties:
      AutoScalingGroupName: TweetAutoScalingGroup
      MinSize: 2
      MaxSize: 2
      DesiredCapacity: 2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !ImportValue PrivateSubnet1Id
        - !ImportValue PrivateSubnet2Id
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      Tags:
        - Key: Name
          Value: TweetAutoScalingInstance
          PropagateAtLaunch: true

Outputs:
  ALBDNSName:
    Description: The DNS name of the load balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    