AWSTemplateFormatVersion: '2010-09-09'
Description: Auto Scaling Group with EC2 instances in private subnets

# Defining parameters
Parameters:
  LaunchTemplateName:
    Type: String
    Description: Name of the EC2 Launch Template
    Default: TweetServers

  NetworkStackName:
    Type: String
    Description: Name of the network stack
    Default: NetworkStack

  KeyPairName:
    Description: Key pair name for SSH access
    Type: AWS::EC2::KeyPair::KeyName

  SecurityGroupsStackName:
    Type: String
    Description: Name of the security groups stack
    Default: SecurityGroupsStack

  ALBListenerPort:
    Type: Number
    Description: Port for the ALB listener
    Default: 80

Resources:
  # Initiating EC2 linux instances
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Ref LaunchTemplateName
      LaunchTemplateData:
        InstanceType: t3.micro
        ImageId: ami-05edb7c94b324f73c  # Amazon Linux 2023
        KeyName: !Ref KeyPairName
        SecurityGroupIds:
          - !ImportValue InstanceSecurityGroupId
        UserData:
          Fn::Base64: 
            !Sub |
              #!/bin/bash
              yum update -y
              yum install -y httpd
              systemctl start httpd
              systemctl enable httpd
              echo "<h1>Hello from Tweet App Server</h1>" > /var/www/html/index.html

  # Creating scaling group containing the 2 EC2 instances
  TweetAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: TweetAutoScalingGroup
      MinSize: 2
      MaxSize: 2
      DesiredCapacity: 2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !ImportValue PrivateSubnet1Id
        - !ImportValue PrivateSubnet2Id
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      Tags:
        - Key: Name
          Value: TweetAutoScalingInstance
          PropagateAtLaunch: true

  # Application Load Balancer (ALB)
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: TweetALB
      Scheme: internet-facing
      Subnets:
        - !ImportValue PublicSubnet1Id
        - !ImportValue PublicSubnet2Id
      SecurityGroups:
        - !ImportValue ALBSecurityGroupId
      Tags:
        - Key: Name
          Value: TweetALB

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: !Ref ALBListenerPort
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: TweetTargetGroup
      VpcId: !ImportValue VPCId
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthCheckEnabled: true
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckPort: traffic-port
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3

Outputs:
  AutoScalingGroupId:
    Description: The ID of the Auto Scaling Group
    Value: !Ref TweetAutoScalingGroup

  LaunchTemplateId:
    Description: The ID of the Launch Template
    Value: !Ref LaunchTemplate

  ALBArn:
    Description: The ARN of the Application Load Balancer
    Value: !Ref ApplicationLoadBalancer

  ALBListenerArn:
    Description: The ARN of the ALB Listener
    Value: !Ref ALBListener

  TargetGroupArn:
    Description: The ARN of the Target Group
    Value: !Ref ALBTargetGroup